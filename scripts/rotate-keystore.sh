#!/bin/bash

# Keystore Rotation Script
# This script helps rotate signing credentials for security purposes

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to generate secure password
generate_password() {
    if command -v openssl >/dev/null 2>&1; then
        openssl rand -base64 32 | tr -d "=+/" | cut -c1-25
    else
        date +%s | sha256sum | base64 | head -c 25
    fi
}

# Function to backup existing keystore
backup_keystore() {
    local keystore_file="$1"
    local backup_dir="keystore-backups"
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local backup_file="$backup_dir/${keystore_file%.keystore}_backup_$timestamp.keystore"
    
    if [ -f "$keystore_file" ]; then
        mkdir -p "$backup_dir"
        cp "$keystore_file" "$backup_file"
        print_success "Keystore backed up to: $backup_file"
        echo "$backup_file"
    else
        print_warning "No existing keystore to backup"
        echo ""
    fi
}

# Function to create new keystore with different alias
create_new_keystore() {
    local keystore_file="$1"
    local key_alias="$2"
    local keystore_password="$3"
    local key_password="$4"
    
    print_info "Creating new keystore with alias: $key_alias"
    
    keytool -genkey -v \
        -keystore "$keystore_file" \
        -alias "$key_alias" \
        -keyalg RSA \
        -keysize 2048 \
        -validity 10000 \
        -storepass "$keystore_password" \
        -keypass "$key_password" \
        -dname "CN=Crypto Tracker App, OU=Development, O=KCode, L=Unknown, ST=Unknown, C=US"
    
    if [ $? -eq 0 ]; then
        print_success "New keystore created successfully"
        return 0
    else
        print_error "Failed to create new keystore"
        return 1
    fi
}

# Function to add new key to existing keystore
add_key_to_keystore() {
    local keystore_file="$1"
    local new_alias="$2"
    local keystore_password="$3"
    local key_password="$4"
    
    print_info "Adding new key to existing keystore with alias: $new_alias"
    
    keytool -genkey -v \
        -keystore "$keystore_file" \
        -alias "$new_alias" \
        -keyalg RSA \
        -keysize 2048 \
        -validity 10000 \
        -storepass "$keystore_password" \
        -keypass "$key_password" \
        -dname "CN=Crypto Tracker App, OU=Development, O=KCode, L=Unknown, ST=Unknown, C=US"
    
    if [ $? -eq 0 ]; then
        print_success "New key added to keystore successfully"
        return 0
    else
        print_error "Failed to add new key to keystore"
        return 1
    fi
}

# Function to list keystore contents
list_keystore_contents() {
    local keystore_file="$1"
    local keystore_password="$2"
    
    print_info "Keystore contents:"
    keytool -list -keystore "$keystore_file" -storepass "$keystore_password"
}

# Function to generate rotation documentation
generate_rotation_docs() {
    local old_alias="$1"
    local new_alias="$2"
    local rotation_date="$3"
    local backup_file="$4"
    local new_keystore_password="$5"
    local new_key_password="$6"
    
    local doc_file="keystore-rotation-$(date +%Y%m%d).md"
    
    cat > "$doc_file" << EOF
# Keystore Rotation Documentation

**Date**: $rotation_date
**Old Key Alias**: $old_alias
**New Key Alias**: $new_alias
**Backup Location**: $backup_file

## Rotation Details

### What Changed
- Generated new signing key with alias: $new_alias
- Created backup of previous keystore
- Updated GitHub Secrets with new credentials

### New Credentials
- **Key Alias**: $new_alias
- **Keystore Password**: [REDACTED - Check GitHub Secrets]
- **Key Password**: [REDACTED - Check GitHub Secrets]

### GitHub Secrets Updated
- [ ] KEYSTORE_BASE64
- [ ] KEYSTORE_PASSWORD  
- [ ] KEY_ALIAS
- [ ] KEY_PASSWORD

### Verification Steps
1. Test local build with new credentials
2. Verify GitHub Actions workflow
3. Confirm AAB signing works correctly

### Rollback Plan
If issues occur, restore from backup:
\`\`\`bash
cp "$backup_file" release.keystore
# Update GitHub Secrets with old credentials
\`\`\`

### Security Notes
- Old keystore backup is stored securely
- New credentials use strong generated passwords
- All secrets updated in GitHub repository

### Next Steps
1. Test the new signing configuration
2. Update any local development environments
3. Document the change in team communications
4. Schedule next rotation (recommended: annually)

---
*Generated by keystore rotation script on $rotation_date*
EOF

    print_success "Rotation documentation saved to: $doc_file"
}

# Main function
main() {
    print_info "ðŸ”„ Keystore Rotation Tool"
    echo ""
    
    # Check dependencies
    if ! command -v keytool >/dev/null 2>&1; then
        print_error "keytool is not available. Please install Java JDK."
        exit 1
    fi
    
    if ! command -v base64 >/dev/null 2>&1; then
        print_error "base64 command is not available."
        exit 1
    fi
    
    # Configuration
    local keystore_file="release.keystore"
    local old_alias="release"
    local new_alias="release_$(date +%Y%m%d)"
    local rotation_date=$(date +"%Y-%m-%d %H:%M:%S")
    
    print_warning "ðŸš¨ IMPORTANT: Keystore rotation is a critical security operation"
    print_warning "This will change your app's signing credentials"
    echo ""
    print_info "Current configuration:"
    echo "  - Keystore file: $keystore_file"
    echo "  - Old alias: $old_alias"
    echo "  - New alias: $new_alias"
    echo ""
    
    read -p "Do you want to proceed with keystore rotation? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_info "Rotation cancelled."
        exit 0
    fi
    
    # Step 1: Backup existing keystore
    print_info "Step 1: Backing up existing keystore..."
    local backup_file=$(backup_keystore "$keystore_file")
    
    # Step 2: Generate new credentials
    print_info "Step 2: Generating new credentials..."
    local new_keystore_password=$(generate_password)
    local new_key_password=$(generate_password)
    
    print_success "New credentials generated"
    
    # Step 3: Choose rotation strategy
    echo ""
    print_info "Choose rotation strategy:"
    echo "  1. Create completely new keystore (recommended for security)"
    echo "  2. Add new key to existing keystore (maintains compatibility)"
    echo ""
    read -p "Enter choice (1 or 2): " -n 1 -r choice
    echo ""
    
    case $choice in
        1)
            print_info "Step 3: Creating new keystore..."
            if create_new_keystore "$keystore_file.new" "$new_alias" "$new_keystore_password" "$new_key_password"; then
                mv "$keystore_file.new" "$keystore_file"
                print_success "New keystore created and activated"
            else
                print_error "Failed to create new keystore"
                exit 1
            fi
            ;;
        2)
            print_info "Step 3: Adding new key to existing keystore..."
            if [ -f "$keystore_file" ]; then
                read -s -p "Enter current keystore password: " current_password
                echo ""
                if add_key_to_keystore "$keystore_file" "$new_alias" "$current_password" "$new_key_password"; then
                    new_keystore_password="$current_password"
                    print_success "New key added to existing keystore"
                else
                    print_error "Failed to add new key to keystore"
                    exit 1
                fi
            else
                print_error "Existing keystore not found"
                exit 1
            fi
            ;;
        *)
            print_error "Invalid choice"
            exit 1
            ;;
    esac
    
    # Step 4: Verify new keystore
    print_info "Step 4: Verifying new keystore..."
    list_keystore_contents "$keystore_file" "$new_keystore_password"
    
    # Step 5: Generate base64 encoded keystore
    print_info "Step 5: Encoding keystore for GitHub Secrets..."
    local keystore_base64=$(base64 -i "$keystore_file")
    
    # Step 6: Create new secrets file
    local secrets_file="github-secrets-rotated-$(date +%Y%m%d).txt"
    cat > "$secrets_file" << EOF
# Updated GitHub Secrets after Keystore Rotation
# Date: $rotation_date

KEYSTORE_BASE64:
$keystore_base64

KEYSTORE_PASSWORD:
$new_keystore_password

KEY_ALIAS:
$new_alias

KEY_PASSWORD:
$new_key_password

# Instructions:
# 1. Update these secrets in your GitHub repository
# 2. Test the build workflow
# 3. Delete this file after updating secrets
EOF
    
    # Step 7: Generate documentation
    print_info "Step 6: Generating rotation documentation..."
    generate_rotation_docs "$old_alias" "$new_alias" "$rotation_date" "$backup_file" "$new_keystore_password" "$new_key_password"
    
    # Summary
    echo ""
    print_success "ðŸŽ‰ Keystore rotation completed successfully!"
    echo ""
    print_info "ðŸ“‹ Summary:"
    echo "  âœ… Old keystore backed up: $backup_file"
    echo "  âœ… New keystore created with alias: $new_alias"
    echo "  âœ… New secrets file: $secrets_file"
    echo "  âœ… Documentation generated"
    echo ""
    
    print_warning "ðŸ”’ Next Steps:"
    echo "  1. Update GitHub Secrets with new credentials"
    echo "  2. Test build workflow with new keystore"
    echo "  3. Verify AAB signing works correctly"
    echo "  4. Delete secrets file: rm $secrets_file"
    echo "  5. Securely store backup keystore"
    echo ""
    
    print_info "ðŸš¨ Important Reminders:"
    echo "  â€¢ Test thoroughly before deploying to production"
    echo "  â€¢ Keep backup keystore secure and accessible"
    echo "  â€¢ Update team documentation about the change"
    echo "  â€¢ Consider scheduling regular rotations"
}

# Run main function
main "$@"